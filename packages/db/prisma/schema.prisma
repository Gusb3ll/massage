datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
  output        = "../dist/client"
}

enum Role {
  USER
  MASSAGER
  PROPERTY_OWNER
  ADMIN
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  password        String
  phoneNumber     String
  firstName       String
  lastName        String
  gender          String
  dateOfBirth     String
  role            Role             @default(USER)
  isEmailVerified Boolean          @default(false)
  massager        Massager?
  owner           PropertyOwner?
  bookings        Booking[]
  massagerReviews MassagerReview[]
  propertyReviews PropertyReview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MassagerStatus {
  AVAILABLE
  OCCUPIED
  UNAVAILABLE
  UNKNOWN
}

model Massager {
  id            String           @id @default(cuid())
  coverImage    String
  profileImage  String
  massageImages String[]
  certificates  String[]
  isVaccinated  Boolean          @default(false)
  status        MassagerStatus   @default(UNKNOWN)
  bookings      Booking[]
  properties    Property[]
  reviews       MassagerReview[]

  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MassagerReview {
  id          String @id @default(cuid())
  rating      Int
  description String

  userId     String
  user       User     @relation(fields: [userId], references: [id])
  massagerId String
  massager   Massager @relation(fields: [massagerId], references: [id])
  createdAt  DateTime @default(now())
}

model PropertyOwner {
  id           String     @id @default(cuid())
  coverImage   String
  profileImage String
  properties   Property[]

  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Property {
  id          String           @id @default(cuid())
  name        String
  address     Json
  description String
  images      String[]
  price       Float
  rooms       Int
  roomWidth   Int
  roomHeight  Int
  bookings    Booking[]
  massagers   Massager[]
  reviews     PropertyReview[]

  ownerId   String
  owner     PropertyOwner @relation(fields: [ownerId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model PropertyReview {
  id          String @id @default(cuid())
  rating      Int
  description String

  userId     String
  user       User     @relation(fields: [userId], references: [id])
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
}

enum BookingStatus {
  PENDING_MASSAGER
  PENDING_PAYMENT
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Booking {
  id                 String                     @id @default(cuid())
  status             BookingStatus
  bookingDate        DateTime
  massagerId         String
  massager           Massager                   @relation(fields: [massagerId], references: [id])
  propertyId         String
  property           Property                   @relation(fields: [propertyId], references: [id])
  userId             String
  user               User                       @relation(fields: [userId], references: [id])
  paymentTransaction BookingPaymentTransaction?
  chats              BookingChat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BookingChatActor {
  USER
  MASSAGER
}

model BookingChat {
  id      String           @id @default(cuid())
  message String
  actor   BookingChatActor

  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id])
  createdAt DateTime @default(now())
}

enum PaymentTransactionStatus {
  PENDING
  CANCELLED
  COMPLETED
  FAILED
}

enum PaymentMethod {
  CASH
  STRIPE
}

model BookingPaymentTransaction {
  id          String                   @id @default(cuid())
  extId       String
  referenceNo String
  status      PaymentTransactionStatus @default(PENDING)
  method      PaymentMethod
  amount      Float

  bookingId String   @unique
  booking   Booking  @relation(fields: [bookingId], references: [id])
  createdAt DateTime @default(now())
}

//

model ResetPassword {
  userId    String
  token     String
  createdAt DateTime @default(now())

  @@id([userId, token])
}

model EmailVerify {
  userId    String
  token     String
  createdAt DateTime @default(now())

  @@id([userId, token])
}
